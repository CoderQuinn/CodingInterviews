// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 50;
	objects = {

/* Begin PBXBuildFile section */
		E415544C24FAAF5C001DD7A5 /* 05 replaceSpace.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E415544B24FAAF5C001DD7A5 /* 05 replaceSpace.cpp */; };
		E4193E8F2516FB51005AE1D1 /* 57 和为s的两个数字.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4193E8E2516FB51005AE1D1 /* 57 和为s的两个数字.cpp */; };
		E4193E91251752E8005AE1D1 /* 57 - II 和为s的连续正数序列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4193E90251752E8005AE1D1 /* 57 - II 和为s的连续正数序列.cpp */; };
		E4193E932517585A005AE1D1 /* 58 - I 翻转单词顺序.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4193E922517585A005AE1D1 /* 58 - I 翻转单词顺序.cpp */; };
		E4193E972517B05D005AE1D1 /* 60 n个骰子的点数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4193E962517B05D005AE1D1 /* 60 n个骰子的点数.cpp */; };
		E4193E992517B934005AE1D1 /* 58 - II 左旋转字符串.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4193E982517B934005AE1D1 /* 58 - II 左旋转字符串.cpp */; };
		E4193E9B25184E8C005AE1D1 /* 67 把字符串转换成整数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4193E9A25184E8C005AE1D1 /* 67 把字符串转换成整数.cpp */; };
		E4193E9D25186671005AE1D1 /* 65 不用加减乘除做加法.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4193E9C25186671005AE1D1 /* 65 不用加减乘除做加法.cpp */; };
		E4193E9F2518773B005AE1D1 /* 66 构建乘积数组.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4193E9E2518773B005AE1D1 /* 66 构建乘积数组.cpp */; };
		E4193EA12518830C005AE1D1 /* 61 扑克牌中的顺子.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4193EA02518830C005AE1D1 /* 61 扑克牌中的顺子.cpp */; };
		E4193EA32518848A005AE1D1 /* 64 求1+2+…+n.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4193EA22518848A005AE1D1 /* 64 求1+2+…+n.cpp */; };
		E421C36424EB7E9E00C100FB /* main.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E421C36324EB7E9E00C100FB /* main.cpp */; };
		E421C36E24EB7EF300C100FB /* 51 数组中的逆序对.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E421C36D24EB7EF300C100FB /* 51 数组中的逆序对.cpp */; };
		E4541E0924F88DA700965ADA /* 06 reversePrint.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E0824F88DA700965ADA /* 06 reversePrint.cpp */; };
		E4541E0B24F8933600965ADA /* 14 剪绳子.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E0A24F8933600965ADA /* 14 剪绳子.cpp */; };
		E4541E0D24F8952500965ADA /* 18 删除链表的节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E0C24F8952500965ADA /* 18 删除链表的节点.cpp */; };
		E4541E0F24F8976C00965ADA /* 22 链表中倒数第k个节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E0E24F8976C00965ADA /* 22 链表中倒数第k个节点.cpp */; };
		E4541E1124F89A2400965ADA /* 24 反转链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E1024F89A2400965ADA /* 24 反转链表.cpp */; };
		E4541E1324F89EFE00965ADA /* 62 圆圈中最后剩下的数字.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E1224F89EFE00965ADA /* 62 圆圈中最后剩下的数字.cpp */; };
		E4541E1524F89F8300965ADA /* 52 两个链表的第一个公共节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E1424F89F8300965ADA /* 52 两个链表的第一个公共节点.cpp */; };
		E4541E1724F8A1BB00965ADA /* 35 复杂链表的复制.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E1624F8A1BB00965ADA /* 35 复杂链表的复制.cpp */; };
		E4541E1924F8A97F00965ADA /* 15 二进制中1的个数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E1824F8A97F00965ADA /* 15 二进制中1的个数.cpp */; };
		E4541E1D24F8AEA800965ADA /* 27 二叉树的镜像.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E1C24F8AEA800965ADA /* 27 二叉树的镜像.cpp */; };
		E4541E2124F8B2D600965ADA /* 28 对称的二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E2024F8B2D600965ADA /* 28 对称的二叉树.cpp */; };
		E4541E2324F8BC7F00965ADA /* 32 从上到下打印二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E2224F8BC7F00965ADA /* 32 从上到下打印二叉树.cpp */; };
		E4541E2524F8C75500965ADA /* 26 树的子结构.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E2424F8C75500965ADA /* 26 树的子结构.cpp */; };
		E4541E2724F8E58200965ADA /* 07 buildTree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E2624F8E58200965ADA /* 07 buildTree.cpp */; };
		E4541E2924F8E68E00965ADA /* 32 从上到下打印二叉树 II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E2824F8E68E00965ADA /* 32 从上到下打印二叉树 II.cpp */; };
		E4541E2B24F8E81F00965ADA /* 32 从上到下打印二叉树 III.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E2A24F8E81E00965ADA /* 32 从上到下打印二叉树 III.cpp */; };
		E4541E2D24F8EC5600965ADA /* 55 - I 二叉树的深度.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E2C24F8EC5600965ADA /* 55 - I 二叉树的深度.cpp */; };
		E4541E2F24F8F03F00965ADA /* 55 - II 平衡二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E2E24F8F03F00965ADA /* 55 - II 平衡二叉树.cpp */; };
		E4541E3124F8FE8C00965ADA /* 68 - I 二叉搜索树的最近公共祖先  .cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E3024F8FE8C00965ADA /* 68 - I 二叉搜索树的最近公共祖先  .cpp */; };
		E4541E3324F9074900965ADA /* 68 - II 树中两个结点的最低公共祖先.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4541E3224F9074900965ADA /* 68 - II 树中两个结点的最低公共祖先.cpp */; };
		E46C894125146C1F003481C8 /* 44 数字序列中某一位的数字.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E46C894025146C1F003481C8 /* 44 数字序列中某一位的数字.cpp */; };
		E46C894325148BC0003481C8 /* 45 把数组排成最小的数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E46C894225148BC0003481C8 /* 45 把数组排成最小的数.cpp */; };
		E46C89452514903F003481C8 /* 46 把数字翻译成字符串.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E46C89442514903F003481C8 /* 46 把数字翻译成字符串.cpp */; };
		E46C8947251498A1003481C8 /* 54 二叉搜索树的第k大节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E46C8946251498A1003481C8 /* 54 二叉搜索树的第k大节点.cpp */; };
		E46C894D2514A331003481C8 /* 49 丑数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E46C894C2514A331003481C8 /* 49 丑数.cpp */; };
		E46C894F2514ABBE003481C8 /* 56 - I 数组中数字出现的次数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E46C894E2514ABBE003481C8 /* 56 - I 数组中数字出现的次数.cpp */; };
		E46C89512514ACA2003481C8 /* 56 - II 数组中数字出现的次数 II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E46C89502514ACA2003481C8 /* 56 - II 数组中数字出现的次数 II.cpp */; };
		E48538C724FCEE8400A688E3 /* 10- I fib.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E48538C624FCEE8400A688E3 /* 10- I fib.cpp */; };
		E48538C924FCF42600A688E3 /* 10- II numWays.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E48538C824FCF42600A688E3 /* 10- II numWays.cpp */; };
		E48538CB24FCF8E800A688E3 /* 47 礼物的最大价值.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E48538CA24FCF8E800A688E3 /* 47 礼物的最大价值.cpp */; };
		E48538CD24FD360E00A688E3 /* 63 股票的最大利润  .cpp in Sources */ = {isa = PBXBuildFile; fileRef = E48538CC24FD360E00A688E3 /* 63 股票的最大利润  .cpp */; };
		E48538CF24FD374300A688E3 /* 16 数值的整数次方.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E48538CE24FD374300A688E3 /* 16 数值的整数次方.cpp */; };
		E49B31932513A64E007C2793 /* 37 序列化二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E49B31922513A64E007C2793 /* 37 序列化二叉树.cpp */; };
		E49CDFDF25034CF1006F537F /* 12 Word Search.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E49CDFDE25034CF1006F537F /* 12 Word Search.cpp */; };
		E49E1DD12507DC4400245AC3 /* 19 正则表达式匹配.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E49E1DD02507DC4400245AC3 /* 19 正则表达式匹配.cpp */; };
		E49E1DD32507DCBB00245AC3 /* 13 机器人的运动范围  .cpp in Sources */ = {isa = PBXBuildFile; fileRef = E49E1DD22507DCBB00245AC3 /* 13 机器人的运动范围  .cpp */; };
		E49E1DD52508A4F500245AC3 /* 17 打印从1到最大的n位数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E49E1DD42508A4F500245AC3 /* 17 打印从1到最大的n位数.cpp */; };
		E49E1DD72508B51600245AC3 /* 20 表示数值的字符串.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E49E1DD62508B51600245AC3 /* 20 表示数值的字符串.cpp */; };
		E49E1DD92508C7DD00245AC3 /* 21 调整数组顺序使奇数位于偶数前面.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E49E1DD82508C7DD00245AC3 /* 21 调整数组顺序使奇数位于偶数前面.cpp */; };
		E49E1DDB2508CC5F00245AC3 /* 31 栈的压入、弹出序列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E49E1DDA2508CC5F00245AC3 /* 31 栈的压入、弹出序列.cpp */; };
		E49E1DDD2508DAE800245AC3 /* 33 二叉搜索树的后序遍历序列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E49E1DDC2508DAE800245AC3 /* 33 二叉搜索树的后序遍历序列.cpp */; };
		E49E1DDF2508DE8200245AC3 /* 34 二叉树中和为某一值的路径.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E49E1DDE2508DE8200245AC3 /* 34 二叉树中和为某一值的路径.cpp */; };
		E49E1DE12508E89200245AC3 /* 36 二叉搜索树与双向链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E49E1DE02508E89200245AC3 /* 36 二叉搜索树与双向链表.cpp */; };
		E49E1DE32509015000245AC3 /* 38 字符串的排列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E49E1DE22509015000245AC3 /* 38 字符串的排列.cpp */; };
		E4CA103824EB99BE0036522E /* 25 合并两个排序的链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4CA103724EB99BE0036522E /* 25 合并两个排序的链表.cpp */; };
		E4CA103A24EB9E310036522E /* 40 最小的k个数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4CA103924EB9E310036522E /* 40 最小的k个数.cpp */; };
		E4CB2E2B24F6B06E00D5EA1A /* 41 数据流中的中位数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4CB2E2A24F6B06E00D5EA1A /* 41 数据流中的中位数.cpp */; };
		E4E2D88F24FC1F5700F267B7 /* 14 剪绳子 II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4E2D88E24FC1F5700F267B7 /* 14 剪绳子 II.cpp */; };
		E4EAE79124F656B1001AF2B1 /* 03 数组中重复的数字  .cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4EAE79024F656B1001AF2B1 /* 03 数组中重复的数字  .cpp */; };
		E4EAE79324F657F9001AF2B1 /* 04 findNumberIn2DArray.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4EAE79224F657F9001AF2B1 /* 04 findNumberIn2DArray.cpp */; };
		E4EAE79524F65B49001AF2B1 /* 50 第一个只出现一次的字符.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4EAE79424F65B49001AF2B1 /* 50 第一个只出现一次的字符.cpp */; };
		E4EAE79724F65E03001AF2B1 /* 09 CQueue.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4EAE79624F65E03001AF2B1 /* 09 CQueue.cpp */; };
		E4EAE79924F661C7001AF2B1 /* 11 minArray.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4EAE79824F661C7001AF2B1 /* 11 minArray.cpp */; };
		E4EAE79B24F66EA9001AF2B1 /* 29 顺时针打印矩阵.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4EAE79A24F66EA9001AF2B1 /* 29 顺时针打印矩阵.cpp */; };
		E4EAE79D24F67DCF001AF2B1 /* 39 数组中出现次数超过一半的数字.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4EAE79C24F67DCF001AF2B1 /* 39 数组中出现次数超过一半的数字.cpp */; };
		E4EAE79F24F6806A001AF2B1 /* 30 包含min函数的栈.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4EAE79E24F6806A001AF2B1 /* 30 包含min函数的栈.cpp */; };
		E4EAE7A124F6837E001AF2B1 /* 48 最长不含重复字符的子字符串.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4EAE7A024F6837E001AF2B1 /* 48 最长不含重复字符的子字符串.cpp */; };
		E4EAE7A324F687A8001AF2B1 /* 59 - I 滑动窗口的最大值.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4EAE7A224F687A8001AF2B1 /* 59 - I 滑动窗口的最大值.cpp */; };
		E4EAE7A524F68DE0001AF2B1 /* 59 - II 队列的最大值.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4EAE7A424F68DE0001AF2B1 /* 59 - II 队列的最大值.cpp */; };
		E4EAE7A724F69563001AF2B1 /* 53 - I 在排序数组中查找数字 I  .cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4EAE7A624F69563001AF2B1 /* 53 - I 在排序数组中查找数字 I  .cpp */; };
		E4EAE7A924F69C1F001AF2B1 /* 53 - II 0～n-1中缺失的数字  .cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4EAE7A824F69C1F001AF2B1 /* 53 - II 0～n-1中缺失的数字  .cpp */; };
		E4EB63B425138E7F006D318C /* 43 1～n整数中1出现的次数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4EB63B325138E7F006D318C /* 43 1～n整数中1出现的次数.cpp */; };
		E4FC44F924ECF7480015DB63 /* 42 连续子数组的最大和 .cpp in Sources */ = {isa = PBXBuildFile; fileRef = E4FC44F824ECF7480015DB63 /* 42 连续子数组的最大和 .cpp */; };
/* End PBXBuildFile section */

/* Begin PBXCopyFilesBuildPhase section */
		E421C35E24EB7E9E00C100FB /* CopyFiles */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = /usr/share/man/man1/;
			dstSubfolderSpec = 0;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 1;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		E415544B24FAAF5C001DD7A5 /* 05 replaceSpace.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "05 replaceSpace.cpp"; sourceTree = "<group>"; };
		E4193E8E2516FB51005AE1D1 /* 57 和为s的两个数字.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "57 和为s的两个数字.cpp"; sourceTree = "<group>"; };
		E4193E90251752E8005AE1D1 /* 57 - II 和为s的连续正数序列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "57 - II 和为s的连续正数序列.cpp"; sourceTree = "<group>"; };
		E4193E922517585A005AE1D1 /* 58 - I 翻转单词顺序.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "58 - I 翻转单词顺序.cpp"; sourceTree = "<group>"; };
		E4193E962517B05D005AE1D1 /* 60 n个骰子的点数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "60 n个骰子的点数.cpp"; sourceTree = "<group>"; };
		E4193E982517B934005AE1D1 /* 58 - II 左旋转字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "58 - II 左旋转字符串.cpp"; sourceTree = "<group>"; };
		E4193E9A25184E8C005AE1D1 /* 67 把字符串转换成整数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "67 把字符串转换成整数.cpp"; sourceTree = "<group>"; };
		E4193E9C25186671005AE1D1 /* 65 不用加减乘除做加法.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "65 不用加减乘除做加法.cpp"; sourceTree = "<group>"; };
		E4193E9E2518773B005AE1D1 /* 66 构建乘积数组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "66 构建乘积数组.cpp"; sourceTree = "<group>"; };
		E4193EA02518830C005AE1D1 /* 61 扑克牌中的顺子.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "61 扑克牌中的顺子.cpp"; sourceTree = "<group>"; };
		E4193EA22518848A005AE1D1 /* 64 求1+2+…+n.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "64 求1+2+…+n.cpp"; sourceTree = "<group>"; };
		E421C36024EB7E9E00C100FB /* Leetcode-CodingInterviews */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = "Leetcode-CodingInterviews"; sourceTree = BUILT_PRODUCTS_DIR; };
		E421C36324EB7E9E00C100FB /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = "<group>"; };
		E421C36D24EB7EF300C100FB /* 51 数组中的逆序对.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "51 数组中的逆序对.cpp"; sourceTree = "<group>"; };
		E4541E0824F88DA700965ADA /* 06 reversePrint.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "06 reversePrint.cpp"; sourceTree = "<group>"; };
		E4541E0A24F8933600965ADA /* 14 剪绳子.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "14 剪绳子.cpp"; sourceTree = "<group>"; };
		E4541E0C24F8952500965ADA /* 18 删除链表的节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "18 删除链表的节点.cpp"; sourceTree = "<group>"; };
		E4541E0E24F8976C00965ADA /* 22 链表中倒数第k个节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "22 链表中倒数第k个节点.cpp"; sourceTree = "<group>"; };
		E4541E1024F89A2400965ADA /* 24 反转链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "24 反转链表.cpp"; sourceTree = "<group>"; };
		E4541E1224F89EFE00965ADA /* 62 圆圈中最后剩下的数字.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "62 圆圈中最后剩下的数字.cpp"; sourceTree = "<group>"; };
		E4541E1424F89F8300965ADA /* 52 两个链表的第一个公共节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "52 两个链表的第一个公共节点.cpp"; sourceTree = "<group>"; };
		E4541E1624F8A1BB00965ADA /* 35 复杂链表的复制.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "35 复杂链表的复制.cpp"; sourceTree = "<group>"; };
		E4541E1824F8A97F00965ADA /* 15 二进制中1的个数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "15 二进制中1的个数.cpp"; sourceTree = "<group>"; };
		E4541E1C24F8AEA800965ADA /* 27 二叉树的镜像.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "27 二叉树的镜像.cpp"; sourceTree = "<group>"; };
		E4541E2024F8B2D600965ADA /* 28 对称的二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "28 对称的二叉树.cpp"; sourceTree = "<group>"; };
		E4541E2224F8BC7F00965ADA /* 32 从上到下打印二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "32 从上到下打印二叉树.cpp"; sourceTree = "<group>"; };
		E4541E2424F8C75500965ADA /* 26 树的子结构.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "26 树的子结构.cpp"; sourceTree = "<group>"; };
		E4541E2624F8E58200965ADA /* 07 buildTree.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "07 buildTree.cpp"; sourceTree = "<group>"; };
		E4541E2824F8E68E00965ADA /* 32 从上到下打印二叉树 II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "32 从上到下打印二叉树 II.cpp"; sourceTree = "<group>"; };
		E4541E2A24F8E81E00965ADA /* 32 从上到下打印二叉树 III.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "32 从上到下打印二叉树 III.cpp"; sourceTree = "<group>"; };
		E4541E2C24F8EC5600965ADA /* 55 - I 二叉树的深度.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "55 - I 二叉树的深度.cpp"; sourceTree = "<group>"; };
		E4541E2E24F8F03F00965ADA /* 55 - II 平衡二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "55 - II 平衡二叉树.cpp"; sourceTree = "<group>"; };
		E4541E3024F8FE8C00965ADA /* 68 - I 二叉搜索树的最近公共祖先  .cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "68 - I 二叉搜索树的最近公共祖先  .cpp"; sourceTree = "<group>"; };
		E4541E3224F9074900965ADA /* 68 - II 树中两个结点的最低公共祖先.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "68 - II 树中两个结点的最低公共祖先.cpp"; sourceTree = "<group>"; };
		E46C894025146C1F003481C8 /* 44 数字序列中某一位的数字.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "44 数字序列中某一位的数字.cpp"; sourceTree = "<group>"; };
		E46C894225148BC0003481C8 /* 45 把数组排成最小的数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "45 把数组排成最小的数.cpp"; sourceTree = "<group>"; };
		E46C89442514903F003481C8 /* 46 把数字翻译成字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "46 把数字翻译成字符串.cpp"; sourceTree = "<group>"; };
		E46C8946251498A1003481C8 /* 54 二叉搜索树的第k大节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "54 二叉搜索树的第k大节点.cpp"; sourceTree = "<group>"; };
		E46C894C2514A331003481C8 /* 49 丑数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "49 丑数.cpp"; sourceTree = "<group>"; };
		E46C894E2514ABBE003481C8 /* 56 - I 数组中数字出现的次数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "56 - I 数组中数字出现的次数.cpp"; sourceTree = "<group>"; };
		E46C89502514ACA2003481C8 /* 56 - II 数组中数字出现的次数 II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "56 - II 数组中数字出现的次数 II.cpp"; sourceTree = "<group>"; };
		E48538C624FCEE8400A688E3 /* 10- I fib.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "10- I fib.cpp"; sourceTree = "<group>"; };
		E48538C824FCF42600A688E3 /* 10- II numWays.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "10- II numWays.cpp"; sourceTree = "<group>"; };
		E48538CA24FCF8E800A688E3 /* 47 礼物的最大价值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "47 礼物的最大价值.cpp"; sourceTree = "<group>"; };
		E48538CC24FD360E00A688E3 /* 63 股票的最大利润  .cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "63 股票的最大利润  .cpp"; sourceTree = "<group>"; };
		E48538CE24FD374300A688E3 /* 16 数值的整数次方.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "16 数值的整数次方.cpp"; sourceTree = "<group>"; };
		E49B31922513A64E007C2793 /* 37 序列化二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "37 序列化二叉树.cpp"; sourceTree = "<group>"; };
		E49CDFDE25034CF1006F537F /* 12 Word Search.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "12 Word Search.cpp"; sourceTree = "<group>"; };
		E49E1DD02507DC4400245AC3 /* 19 正则表达式匹配.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "19 正则表达式匹配.cpp"; sourceTree = "<group>"; };
		E49E1DD22507DCBB00245AC3 /* 13 机器人的运动范围  .cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "13 机器人的运动范围  .cpp"; sourceTree = "<group>"; };
		E49E1DD42508A4F500245AC3 /* 17 打印从1到最大的n位数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "17 打印从1到最大的n位数.cpp"; sourceTree = "<group>"; };
		E49E1DD62508B51600245AC3 /* 20 表示数值的字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "20 表示数值的字符串.cpp"; sourceTree = "<group>"; };
		E49E1DD82508C7DD00245AC3 /* 21 调整数组顺序使奇数位于偶数前面.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "21 调整数组顺序使奇数位于偶数前面.cpp"; sourceTree = "<group>"; };
		E49E1DDA2508CC5F00245AC3 /* 31 栈的压入、弹出序列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "31 栈的压入、弹出序列.cpp"; sourceTree = "<group>"; };
		E49E1DDC2508DAE800245AC3 /* 33 二叉搜索树的后序遍历序列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "33 二叉搜索树的后序遍历序列.cpp"; sourceTree = "<group>"; };
		E49E1DDE2508DE8200245AC3 /* 34 二叉树中和为某一值的路径.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "34 二叉树中和为某一值的路径.cpp"; sourceTree = "<group>"; };
		E49E1DE02508E89200245AC3 /* 36 二叉搜索树与双向链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "36 二叉搜索树与双向链表.cpp"; sourceTree = "<group>"; };
		E49E1DE22509015000245AC3 /* 38 字符串的排列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "38 字符串的排列.cpp"; sourceTree = "<group>"; };
		E4CA103724EB99BE0036522E /* 25 合并两个排序的链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "25 合并两个排序的链表.cpp"; sourceTree = "<group>"; };
		E4CA103924EB9E310036522E /* 40 最小的k个数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "40 最小的k个数.cpp"; sourceTree = "<group>"; };
		E4CB2E2A24F6B06E00D5EA1A /* 41 数据流中的中位数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "41 数据流中的中位数.cpp"; sourceTree = "<group>"; };
		E4E2D88E24FC1F5700F267B7 /* 14 剪绳子 II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "14 剪绳子 II.cpp"; sourceTree = "<group>"; };
		E4EAE79024F656B1001AF2B1 /* 03 数组中重复的数字  .cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "03 数组中重复的数字  .cpp"; sourceTree = "<group>"; };
		E4EAE79224F657F9001AF2B1 /* 04 findNumberIn2DArray.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "04 findNumberIn2DArray.cpp"; sourceTree = "<group>"; };
		E4EAE79424F65B49001AF2B1 /* 50 第一个只出现一次的字符.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "50 第一个只出现一次的字符.cpp"; sourceTree = "<group>"; };
		E4EAE79624F65E03001AF2B1 /* 09 CQueue.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "09 CQueue.cpp"; sourceTree = "<group>"; };
		E4EAE79824F661C7001AF2B1 /* 11 minArray.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "11 minArray.cpp"; sourceTree = "<group>"; };
		E4EAE79A24F66EA9001AF2B1 /* 29 顺时针打印矩阵.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "29 顺时针打印矩阵.cpp"; sourceTree = "<group>"; };
		E4EAE79C24F67DCF001AF2B1 /* 39 数组中出现次数超过一半的数字.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "39 数组中出现次数超过一半的数字.cpp"; sourceTree = "<group>"; };
		E4EAE79E24F6806A001AF2B1 /* 30 包含min函数的栈.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "30 包含min函数的栈.cpp"; sourceTree = "<group>"; };
		E4EAE7A024F6837E001AF2B1 /* 48 最长不含重复字符的子字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "48 最长不含重复字符的子字符串.cpp"; sourceTree = "<group>"; };
		E4EAE7A224F687A8001AF2B1 /* 59 - I 滑动窗口的最大值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "59 - I 滑动窗口的最大值.cpp"; sourceTree = "<group>"; };
		E4EAE7A424F68DE0001AF2B1 /* 59 - II 队列的最大值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "59 - II 队列的最大值.cpp"; sourceTree = "<group>"; };
		E4EAE7A624F69563001AF2B1 /* 53 - I 在排序数组中查找数字 I  .cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "53 - I 在排序数组中查找数字 I  .cpp"; sourceTree = "<group>"; };
		E4EAE7A824F69C1F001AF2B1 /* 53 - II 0～n-1中缺失的数字  .cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "53 - II 0～n-1中缺失的数字  .cpp"; sourceTree = "<group>"; };
		E4EB63B325138E7F006D318C /* 43 1～n整数中1出现的次数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "43 1～n整数中1出现的次数.cpp"; sourceTree = "<group>"; };
		E4FC44F824ECF7480015DB63 /* 42 连续子数组的最大和 .cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "42 连续子数组的最大和 .cpp"; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		E421C35D24EB7E9E00C100FB /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		E421C35724EB7E9E00C100FB = {
			isa = PBXGroup;
			children = (
				E4AE92FA24EC6E2800686F47 /* Problems */,
				E421C36224EB7E9E00C100FB /* Leetcode-CodingInterviews */,
				E421C36124EB7E9E00C100FB /* Products */,
			);
			sourceTree = "<group>";
		};
		E421C36124EB7E9E00C100FB /* Products */ = {
			isa = PBXGroup;
			children = (
				E421C36024EB7E9E00C100FB /* Leetcode-CodingInterviews */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		E421C36224EB7E9E00C100FB /* Leetcode-CodingInterviews */ = {
			isa = PBXGroup;
			children = (
				E421C36324EB7E9E00C100FB /* main.cpp */,
			);
			path = "Leetcode-CodingInterviews";
			sourceTree = "<group>";
		};
		E4AE92FA24EC6E2800686F47 /* Problems */ = {
			isa = PBXGroup;
			children = (
				E4EAE79024F656B1001AF2B1 /* 03 数组中重复的数字  .cpp */,
				E4EAE79224F657F9001AF2B1 /* 04 findNumberIn2DArray.cpp */,
				E415544B24FAAF5C001DD7A5 /* 05 replaceSpace.cpp */,
				E4541E0824F88DA700965ADA /* 06 reversePrint.cpp */,
				E4541E2624F8E58200965ADA /* 07 buildTree.cpp */,
				E4EAE79624F65E03001AF2B1 /* 09 CQueue.cpp */,
				E48538C624FCEE8400A688E3 /* 10- I fib.cpp */,
				E48538C824FCF42600A688E3 /* 10- II numWays.cpp */,
				E4EAE79824F661C7001AF2B1 /* 11 minArray.cpp */,
				E49CDFDE25034CF1006F537F /* 12 Word Search.cpp */,
				E49E1DD22507DCBB00245AC3 /* 13 机器人的运动范围  .cpp */,
				E4541E0A24F8933600965ADA /* 14 剪绳子.cpp */,
				E4E2D88E24FC1F5700F267B7 /* 14 剪绳子 II.cpp */,
				E4541E1824F8A97F00965ADA /* 15 二进制中1的个数.cpp */,
				E48538CE24FD374300A688E3 /* 16 数值的整数次方.cpp */,
				E49E1DD42508A4F500245AC3 /* 17 打印从1到最大的n位数.cpp */,
				E4541E0C24F8952500965ADA /* 18 删除链表的节点.cpp */,
				E49E1DD02507DC4400245AC3 /* 19 正则表达式匹配.cpp */,
				E49E1DD62508B51600245AC3 /* 20 表示数值的字符串.cpp */,
				E49E1DD82508C7DD00245AC3 /* 21 调整数组顺序使奇数位于偶数前面.cpp */,
				E4541E0E24F8976C00965ADA /* 22 链表中倒数第k个节点.cpp */,
				E4541E1024F89A2400965ADA /* 24 反转链表.cpp */,
				E4CA103724EB99BE0036522E /* 25 合并两个排序的链表.cpp */,
				E4541E2424F8C75500965ADA /* 26 树的子结构.cpp */,
				E4541E1C24F8AEA800965ADA /* 27 二叉树的镜像.cpp */,
				E4541E2024F8B2D600965ADA /* 28 对称的二叉树.cpp */,
				E4EAE79A24F66EA9001AF2B1 /* 29 顺时针打印矩阵.cpp */,
				E4EAE79E24F6806A001AF2B1 /* 30 包含min函数的栈.cpp */,
				E49E1DDA2508CC5F00245AC3 /* 31 栈的压入、弹出序列.cpp */,
				E4541E2224F8BC7F00965ADA /* 32 从上到下打印二叉树.cpp */,
				E4541E2824F8E68E00965ADA /* 32 从上到下打印二叉树 II.cpp */,
				E4541E2A24F8E81E00965ADA /* 32 从上到下打印二叉树 III.cpp */,
				E49E1DDC2508DAE800245AC3 /* 33 二叉搜索树的后序遍历序列.cpp */,
				E49E1DDE2508DE8200245AC3 /* 34 二叉树中和为某一值的路径.cpp */,
				E4541E1624F8A1BB00965ADA /* 35 复杂链表的复制.cpp */,
				E49E1DE02508E89200245AC3 /* 36 二叉搜索树与双向链表.cpp */,
				E49B31922513A64E007C2793 /* 37 序列化二叉树.cpp */,
				E49E1DE22509015000245AC3 /* 38 字符串的排列.cpp */,
				E4EAE79C24F67DCF001AF2B1 /* 39 数组中出现次数超过一半的数字.cpp */,
				E4CA103924EB9E310036522E /* 40 最小的k个数.cpp */,
				E4CB2E2A24F6B06E00D5EA1A /* 41 数据流中的中位数.cpp */,
				E4FC44F824ECF7480015DB63 /* 42 连续子数组的最大和 .cpp */,
				E4EB63B325138E7F006D318C /* 43 1～n整数中1出现的次数.cpp */,
				E46C894025146C1F003481C8 /* 44 数字序列中某一位的数字.cpp */,
				E46C894225148BC0003481C8 /* 45 把数组排成最小的数.cpp */,
				E46C89442514903F003481C8 /* 46 把数字翻译成字符串.cpp */,
				E48538CA24FCF8E800A688E3 /* 47 礼物的最大价值.cpp */,
				E4EAE7A024F6837E001AF2B1 /* 48 最长不含重复字符的子字符串.cpp */,
				E46C894C2514A331003481C8 /* 49 丑数.cpp */,
				E4EAE79424F65B49001AF2B1 /* 50 第一个只出现一次的字符.cpp */,
				E421C36D24EB7EF300C100FB /* 51 数组中的逆序对.cpp */,
				E4541E1424F89F8300965ADA /* 52 两个链表的第一个公共节点.cpp */,
				E4EAE7A624F69563001AF2B1 /* 53 - I 在排序数组中查找数字 I  .cpp */,
				E4EAE7A824F69C1F001AF2B1 /* 53 - II 0～n-1中缺失的数字  .cpp */,
				E46C8946251498A1003481C8 /* 54 二叉搜索树的第k大节点.cpp */,
				E4541E2C24F8EC5600965ADA /* 55 - I 二叉树的深度.cpp */,
				E4541E2E24F8F03F00965ADA /* 55 - II 平衡二叉树.cpp */,
				E46C894E2514ABBE003481C8 /* 56 - I 数组中数字出现的次数.cpp */,
				E46C89502514ACA2003481C8 /* 56 - II 数组中数字出现的次数 II.cpp */,
				E4193E8E2516FB51005AE1D1 /* 57 和为s的两个数字.cpp */,
				E4193E90251752E8005AE1D1 /* 57 - II 和为s的连续正数序列.cpp */,
				E4193E922517585A005AE1D1 /* 58 - I 翻转单词顺序.cpp */,
				E4193E982517B934005AE1D1 /* 58 - II 左旋转字符串.cpp */,
				E4EAE7A224F687A8001AF2B1 /* 59 - I 滑动窗口的最大值.cpp */,
				E4EAE7A424F68DE0001AF2B1 /* 59 - II 队列的最大值.cpp */,
				E4193E962517B05D005AE1D1 /* 60 n个骰子的点数.cpp */,
				E4193EA02518830C005AE1D1 /* 61 扑克牌中的顺子.cpp */,
				E4541E1224F89EFE00965ADA /* 62 圆圈中最后剩下的数字.cpp */,
				E48538CC24FD360E00A688E3 /* 63 股票的最大利润  .cpp */,
				E4193EA22518848A005AE1D1 /* 64 求1+2+…+n.cpp */,
				E4193E9C25186671005AE1D1 /* 65 不用加减乘除做加法.cpp */,
				E4193E9E2518773B005AE1D1 /* 66 构建乘积数组.cpp */,
				E4193E9A25184E8C005AE1D1 /* 67 把字符串转换成整数.cpp */,
				E4541E3024F8FE8C00965ADA /* 68 - I 二叉搜索树的最近公共祖先  .cpp */,
				E4541E3224F9074900965ADA /* 68 - II 树中两个结点的最低公共祖先.cpp */,
			);
			path = Problems;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		E421C35F24EB7E9E00C100FB /* Leetcode-CodingInterviews */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = E421C36724EB7E9E00C100FB /* Build configuration list for PBXNativeTarget "Leetcode-CodingInterviews" */;
			buildPhases = (
				E421C35C24EB7E9E00C100FB /* Sources */,
				E421C35D24EB7E9E00C100FB /* Frameworks */,
				E421C35E24EB7E9E00C100FB /* CopyFiles */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = "Leetcode-CodingInterviews";
			productName = "Leetcode-CodingInterviews";
			productReference = E421C36024EB7E9E00C100FB /* Leetcode-CodingInterviews */;
			productType = "com.apple.product-type.tool";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		E421C35824EB7E9E00C100FB /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 1160;
				ORGANIZATIONNAME = QuinnYoung;
				TargetAttributes = {
					E421C35F24EB7E9E00C100FB = {
						CreatedOnToolsVersion = 11.6;
					};
				};
			};
			buildConfigurationList = E421C35B24EB7E9E00C100FB /* Build configuration list for PBXProject "Leetcode-CodingInterviews" */;
			compatibilityVersion = "Xcode 9.3";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = E421C35724EB7E9E00C100FB;
			productRefGroup = E421C36124EB7E9E00C100FB /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				E421C35F24EB7E9E00C100FB /* Leetcode-CodingInterviews */,
			);
		};
/* End PBXProject section */

/* Begin PBXSourcesBuildPhase section */
		E421C35C24EB7E9E00C100FB /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				E4EAE7A124F6837E001AF2B1 /* 48 最长不含重复字符的子字符串.cpp in Sources */,
				E4541E1124F89A2400965ADA /* 24 反转链表.cpp in Sources */,
				E4CB2E2B24F6B06E00D5EA1A /* 41 数据流中的中位数.cpp in Sources */,
				E4193E91251752E8005AE1D1 /* 57 - II 和为s的连续正数序列.cpp in Sources */,
				E48538C924FCF42600A688E3 /* 10- II numWays.cpp in Sources */,
				E4CA103A24EB9E310036522E /* 40 最小的k个数.cpp in Sources */,
				E4541E2124F8B2D600965ADA /* 28 对称的二叉树.cpp in Sources */,
				E46C894325148BC0003481C8 /* 45 把数组排成最小的数.cpp in Sources */,
				E4193E9D25186671005AE1D1 /* 65 不用加减乘除做加法.cpp in Sources */,
				E4193E9F2518773B005AE1D1 /* 66 构建乘积数组.cpp in Sources */,
				E4541E2524F8C75500965ADA /* 26 树的子结构.cpp in Sources */,
				E46C894D2514A331003481C8 /* 49 丑数.cpp in Sources */,
				E4193EA12518830C005AE1D1 /* 61 扑克牌中的顺子.cpp in Sources */,
				E49CDFDF25034CF1006F537F /* 12 Word Search.cpp in Sources */,
				E49E1DD72508B51600245AC3 /* 20 表示数值的字符串.cpp in Sources */,
				E4541E1924F8A97F00965ADA /* 15 二进制中1的个数.cpp in Sources */,
				E46C89452514903F003481C8 /* 46 把数字翻译成字符串.cpp in Sources */,
				E4541E2D24F8EC5600965ADA /* 55 - I 二叉树的深度.cpp in Sources */,
				E4541E0924F88DA700965ADA /* 06 reversePrint.cpp in Sources */,
				E48538CF24FD374300A688E3 /* 16 数值的整数次方.cpp in Sources */,
				E415544C24FAAF5C001DD7A5 /* 05 replaceSpace.cpp in Sources */,
				E4EAE7A924F69C1F001AF2B1 /* 53 - II 0～n-1中缺失的数字  .cpp in Sources */,
				E48538CD24FD360E00A688E3 /* 63 股票的最大利润  .cpp in Sources */,
				E4541E0B24F8933600965ADA /* 14 剪绳子.cpp in Sources */,
				E4CA103824EB99BE0036522E /* 25 合并两个排序的链表.cpp in Sources */,
				E4541E3124F8FE8C00965ADA /* 68 - I 二叉搜索树的最近公共祖先  .cpp in Sources */,
				E49E1DD12507DC4400245AC3 /* 19 正则表达式匹配.cpp in Sources */,
				E4541E2324F8BC7F00965ADA /* 32 从上到下打印二叉树.cpp in Sources */,
				E4EB63B425138E7F006D318C /* 43 1～n整数中1出现的次数.cpp in Sources */,
				E421C36424EB7E9E00C100FB /* main.cpp in Sources */,
				E4EAE7A724F69563001AF2B1 /* 53 - I 在排序数组中查找数字 I  .cpp in Sources */,
				E4541E2724F8E58200965ADA /* 07 buildTree.cpp in Sources */,
				E4EAE79324F657F9001AF2B1 /* 04 findNumberIn2DArray.cpp in Sources */,
				E4EAE7A324F687A8001AF2B1 /* 59 - I 滑动窗口的最大值.cpp in Sources */,
				E49E1DD92508C7DD00245AC3 /* 21 调整数组顺序使奇数位于偶数前面.cpp in Sources */,
				E4541E2F24F8F03F00965ADA /* 55 - II 平衡二叉树.cpp in Sources */,
				E4EAE79D24F67DCF001AF2B1 /* 39 数组中出现次数超过一半的数字.cpp in Sources */,
				E4541E0D24F8952500965ADA /* 18 删除链表的节点.cpp in Sources */,
				E49E1DDD2508DAE800245AC3 /* 33 二叉搜索树的后序遍历序列.cpp in Sources */,
				E4FC44F924ECF7480015DB63 /* 42 连续子数组的最大和 .cpp in Sources */,
				E46C894F2514ABBE003481C8 /* 56 - I 数组中数字出现的次数.cpp in Sources */,
				E46C894125146C1F003481C8 /* 44 数字序列中某一位的数字.cpp in Sources */,
				E49E1DD32507DCBB00245AC3 /* 13 机器人的运动范围  .cpp in Sources */,
				E4541E1524F89F8300965ADA /* 52 两个链表的第一个公共节点.cpp in Sources */,
				E4193E9B25184E8C005AE1D1 /* 67 把字符串转换成整数.cpp in Sources */,
				E4193E932517585A005AE1D1 /* 58 - I 翻转单词顺序.cpp in Sources */,
				E4541E1D24F8AEA800965ADA /* 27 二叉树的镜像.cpp in Sources */,
				E4541E1324F89EFE00965ADA /* 62 圆圈中最后剩下的数字.cpp in Sources */,
				E4EAE79B24F66EA9001AF2B1 /* 29 顺时针打印矩阵.cpp in Sources */,
				E46C89512514ACA2003481C8 /* 56 - II 数组中数字出现的次数 II.cpp in Sources */,
				E4EAE79524F65B49001AF2B1 /* 50 第一个只出现一次的字符.cpp in Sources */,
				E48538CB24FCF8E800A688E3 /* 47 礼物的最大价值.cpp in Sources */,
				E4EAE79724F65E03001AF2B1 /* 09 CQueue.cpp in Sources */,
				E49E1DD52508A4F500245AC3 /* 17 打印从1到最大的n位数.cpp in Sources */,
				E49E1DDF2508DE8200245AC3 /* 34 二叉树中和为某一值的路径.cpp in Sources */,
				E4E2D88F24FC1F5700F267B7 /* 14 剪绳子 II.cpp in Sources */,
				E4193EA32518848A005AE1D1 /* 64 求1+2+…+n.cpp in Sources */,
				E4EAE79124F656B1001AF2B1 /* 03 数组中重复的数字  .cpp in Sources */,
				E4541E2924F8E68E00965ADA /* 32 从上到下打印二叉树 II.cpp in Sources */,
				E4541E0F24F8976C00965ADA /* 22 链表中倒数第k个节点.cpp in Sources */,
				E48538C724FCEE8400A688E3 /* 10- I fib.cpp in Sources */,
				E46C8947251498A1003481C8 /* 54 二叉搜索树的第k大节点.cpp in Sources */,
				E49E1DE12508E89200245AC3 /* 36 二叉搜索树与双向链表.cpp in Sources */,
				E4541E2B24F8E81F00965ADA /* 32 从上到下打印二叉树 III.cpp in Sources */,
				E421C36E24EB7EF300C100FB /* 51 数组中的逆序对.cpp in Sources */,
				E4EAE7A524F68DE0001AF2B1 /* 59 - II 队列的最大值.cpp in Sources */,
				E4EAE79924F661C7001AF2B1 /* 11 minArray.cpp in Sources */,
				E49B31932513A64E007C2793 /* 37 序列化二叉树.cpp in Sources */,
				E4193E8F2516FB51005AE1D1 /* 57 和为s的两个数字.cpp in Sources */,
				E4193E972517B05D005AE1D1 /* 60 n个骰子的点数.cpp in Sources */,
				E4541E3324F9074900965ADA /* 68 - II 树中两个结点的最低公共祖先.cpp in Sources */,
				E49E1DDB2508CC5F00245AC3 /* 31 栈的压入、弹出序列.cpp in Sources */,
				E4EAE79F24F6806A001AF2B1 /* 30 包含min函数的栈.cpp in Sources */,
				E4541E1724F8A1BB00965ADA /* 35 复杂链表的复制.cpp in Sources */,
				E4193E992517B934005AE1D1 /* 58 - II 左旋转字符串.cpp in Sources */,
				E49E1DE32509015000245AC3 /* 38 字符串的排列.cpp in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		E421C36524EB7E9E00C100FB /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.15;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = macosx;
			};
			name = Debug;
		};
		E421C36624EB7E9E00C100FB /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.15;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = macosx;
			};
			name = Release;
		};
		E421C36824EB7E9E00C100FB /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_TEAM = SMTM92RJY3;
				ENABLE_HARDENED_RUNTIME = YES;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Debug;
		};
		E421C36924EB7E9E00C100FB /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_TEAM = SMTM92RJY3;
				ENABLE_HARDENED_RUNTIME = YES;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		E421C35B24EB7E9E00C100FB /* Build configuration list for PBXProject "Leetcode-CodingInterviews" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				E421C36524EB7E9E00C100FB /* Debug */,
				E421C36624EB7E9E00C100FB /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		E421C36724EB7E9E00C100FB /* Build configuration list for PBXNativeTarget "Leetcode-CodingInterviews" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				E421C36824EB7E9E00C100FB /* Debug */,
				E421C36924EB7E9E00C100FB /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = E421C35824EB7E9E00C100FB /* Project object */;
}
